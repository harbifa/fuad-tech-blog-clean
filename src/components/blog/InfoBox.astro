---
export interface Props {
  type?: 'info' | 'warning' | 'success' | 'error' | 'tip'; // جعلها اختيارية
  title: string;
  content: string;
  icon?: string;
}

const {
  type = 'tip', // افتراضيًا "نصيحة"
  title,
  content,
  icon
} = Astro.props;

const typeConfig = {
  info: {
    bg: 'bg-blue-50 dark:bg-blue-900/20',
    border: 'border-blue-200 dark:border-blue-700',
    iconBg: 'bg-blue-500',
    icon: 'ℹ️'
  },
  warning: {
    bg: 'bg-yellow-50 dark:bg-yellow-900/20',
    border: 'border-yellow-200 dark:border-yellow-700',
    iconBg: 'bg-yellow-500',
    icon: '⚠️'
  },
  success: {
    bg: 'bg-green-50 dark:bg-green-900/20',
    border: 'border-green-200 dark:border-green-700',
    iconBg: 'bg-green-500',
    icon: '✅'
  },
  error: {
    bg: 'bg-red-50 dark:bg-red-900/20',
    border: 'border-red-200 dark:border-red-700',
    iconBg: 'bg-red-500',
    icon: '❌'
  },
  tip: {
    bg: 'bg-purple-50 dark:bg-purple-900/20',
    border: 'border-purple-200 dark:border-purple-700',
    iconBg: 'bg-purple-500',
    icon: '💡'
  }
};

// fallback آمن لو type غير معروف لأي سبب
const fallback = {
  bg: 'bg-purple-50 dark:bg-purple-900/20',
  border: 'border-purple-200 dark:border-purple-700',
  iconBg: 'bg-purple-500',
  icon: 'ℹ️'
};

const config = typeConfig[type] ?? fallback;
const displayIcon = icon ?? config.icon;
---

<div class={`${config.bg} ${config.border} rounded-lg p-4 mb-8`}>
  <div class="flex items-start">
    <div class={`w-8 h-8 ${config.iconBg} rounded-lg flex items-center justify-center text-white font-bold text-sm ml-3 flex-shrink-0`}>
      {displayIcon}
    </div>
    <div>
      <h3 class="text-lg font-bold text-gray-800 dark:text-gray-200 mb-2">{title}</h3>
      <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
        {content}
      </p>
    </div>
  </div>
</div>
